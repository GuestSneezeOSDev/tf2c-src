//========= ShiroDkxtro2's --ACROHS Ultimate Shaders Project-- ============//
//
//
//	Initial D.	:	23.01.2023 DMY
//	Last Change :	24.05.2023 DMY
//
//	Purpose of this File :	VertexShader for vs30, to be used on Brushes
//
//===========================================================================//

//	Whether or not we need normal, detail or envmapmask uv modifications.
//	STATIC: "SEAMLESS_BASE"				"0..1"
//  STATIC: "DETAILTEXTURE_UV"			"0..2"
//  STATIC: "NORMALTEXTURE_UV"			"0..2"
//  STATIC: "ENVMAPMASK_UV"				"0..2"
//	STATIC:	"BLENDMODULATE_UV"			"0..2"
//	STATIC:	"SEAMLESS_SECONDARY"		"0..1"

// We include both common_vs_fxc.h and common_fxc.h ( through vs_fxc.h )
// This is done to get definitions etc for vertex shaders 
// #include "common_vs_fxc.h"

// Include for lux shaders
#include "lux_common_vs_fxc.h"

const float4 cBaseTexCoordTransform[2]			: register(SHADER_SPECIFIC_CONST_13); // c223 & c224
const float4 cBase2TexCoordTransform[2]			: register(c242); // c242 & c243
const float4 cSeamlessScales					: register(c240);
const float4 cSeamlessScales2					: register(c241);
#if SEAMLESS_BASE
#define SEAMLESS_BASE_SCALE cSeamlessScales.x
#endif

#if NORMALTEXTURE_UV > 0
const float4 cNormalTexCoordTransform[2]		:  register( SHADER_SPECIFIC_CONST_15 ); // c225 & c226
const float4 cNormal2TexCoordTransform[2]		:  register( c244 ); // c244 & c245
#if NORMALTEXTURE_UV == 2
#define SEAMLESS_BUMP_SCALE cSeamlessScales.z
#endif
#endif

#if DETAILTEXTURE_UV > 0
const float4 cDetailTexCoordTransform[2]		:  register( SHADER_SPECIFIC_CONST_17 );	// c227 & c228
#if DETAILTEXTURE_UV == 2
#define SEAMLESS_DETAIL_SCALE cSeamlessScales.y
#endif
#endif

#if ENVMAPMASK_UV > 0
const float4 cEnvMapMaskTexCoordTransform[2]	:  register( SHADER_SPECIFIC_CONST_19 );	// c229 & c230
#if ENVMAPMASK_UV == 2
#define SEAMLESS_EMM_SCALE cSeamlessScales.w
#endif
#endif

#if BLENDMODULATE_UV
#define SEAMLESS_MODULATE_SCALE cSeamlessScales2.x
const float4 cBlendModulateTexCoordTransform[2]	: register(SHADER_SPECIFIC_CONST_10); //  c14 & c15
#endif

//-----------------------------------------------------------------------------
// Input vertex format
//-----------------------------------------------------------------------------
struct VS_INPUT
{
    // This is all of the stuff that we ever use
    float4 vPos                     : POSITION;
	float4 vBoneWeights             : BLENDWEIGHT;	//	Despite no bones,
	float4 vBoneIndices             : BLENDINDICES; //	we use these in SkinPositionAndNormal()
    float4 vNormal                  : NORMAL;
    float2 vTexCoord0               : TEXCOORD0;
    float4 vLightmapTexCoord        : TEXCOORD1;
    float4 vLightmapTexCoordOffset  : TEXCOORD2;
	float4 vColor                   : COLOR0;
//	float3 vSpecular : COLOR1;
};

struct VS_OUTPUT
{
    // Stuff that isn't seen by the pixel shader
	// This is used by the GPU to determine what's actually rendered on-screen ( The actual screenspace position of our triangles )
    float4 ProjPosSetup				:	POSITION;
    // Stuff that is seen by the pixel shader
    float4	BaseDetailTexCoord		:	TEXCOORD0;
	float4	BlendMaskUVW_BlendScale	:	TEXCOORD1; // UVW and BlendFactor
	float4	WorldNormal				:	TEXCOORD2; // .w = x projection weight for Seamless
	float4	WorldPos				:	TEXCOORD3; // .w = y projection weight for Seamless
	float4	ProjPos					:	TEXCOORD4; // .w = z projection weight for Seamless
	float4	LightmapTexCoord1And2	:	TEXCOORD5;
	float4	LightmapTexCoord3		:	TEXCOORD6;
	float4	SeamlessWCoordinates	:	TEXCOORD7; // UVW.z coordinates
	float4	NormalEMMTexCoord		:	TEXCOORD8;
	float4	Base2Normal2TexCoord	:	TEXCOORD9;
	// Can't add any more than this. Need to do exclusion
};

//-----------------------------------------------------------------------------
// Main shader entry point
//-----------------------------------------------------------------------------
VS_OUTPUT main( const VS_INPUT v )
{
	VS_OUTPUT o = ( VS_OUTPUT )0;
	
	float3 vNormal;
	DecompressVertex_Normal(v.vNormal, vNormal);

#if (SEAMLESS_BASE || DETAILTEXTURE_UV == 2 || NORMALTEXTURE_UV == 2 || ENVMAPMASK_UV == 2)


	float3 NormalizedNormal = normalize(mul( vNormal, ( float3x3 )cModel[0] ));

	// "sums to 1."
	// TODO: A face has a 3 dimensional vector that defines in which direction it is pointing.
	// The sum of this vector is always 1 as it uses a 0-1 range.
	// However we now multiply it by itself, this should never sum to 1 unless the face was facing in only a single direction.
	// So why did the comment say it sums to 1.? It definitely shouldn't!
	NormalizedNormal = NormalizedNormal * NormalizedNormal;
	
	// We hit the limit of output registers on vs30. So we have to do this to retain all functionality.
	o.WorldNormal.w				= NormalizedNormal.x;
	o.WorldPos.w				= NormalizedNormal.y;
	o.ProjPos.w	= NormalizedNormal.z;
#endif
	
	// We mainly use SkinPositionAndNormal because we want the normal ( and pos )
	float3 WorldNormal, WorldPos;
	SkinPositionAndNormal(false, v.vPos, vNormal, v.vBoneWeights, v.vBoneIndices, WorldPos, WorldNormal);
	
	// Transform into projection space
	float4 vProjPos = mul(float4(WorldPos, 1), cViewProj);
	o.ProjPosSetup = vProjPos;
	vProjPos.z = dot(float4(WorldPos, 1), cViewProjZ);
	
	// We don't use .xy on the shader anyways
	o.ProjPos.xyz = vProjPos.xyz;
//	o.Fog = CalcFog(WorldPos, vProjPos.xyz, g_FogType);
	
	// Needed for water fog alpha and diffuse lighting 
	o.WorldPos.xyz = WorldPos;
	o.WorldNormal.xyz = normalize(WorldNormal);
	
	o.LightmapTexCoord3.z = v.vTexCoord0.x * cBaseTexCoordTransform[0].x + cBaseTexCoordTransform[0].w;
	o.LightmapTexCoord3.w = v.vTexCoord0.y * cBaseTexCoordTransform[1].y + cBaseTexCoordTransform[1].w;
	o.LightmapTexCoord1And2.xy = v.vLightmapTexCoord + v.vLightmapTexCoordOffset;
	
	float2 LightmapTexCoord2 = o.LightmapTexCoord1And2.xy + v.vLightmapTexCoordOffset;
	float2 LightmapTexCoord3 = LightmapTexCoord2 + v.vLightmapTexCoordOffset;
	
	// Reversed component order
	o.LightmapTexCoord1And2.w = LightmapTexCoord2.x;
	o.LightmapTexCoord1And2.z = LightmapTexCoord2.y;
	o.LightmapTexCoord3.xy = LightmapTexCoord3;
	
	// Used for Seamless.
	float3 f3SeamlessPos = mul( float4( v.vPos ), cModel[0] ).xyz;

	// BlendModulateTexture Coordinate transform
	#if (BLENDMODULATE_UV == 1)
		// Previously : 
		// o.BlendMaskUVW_BlendScale.x = dot( v.vTexCoord0, cBlendModulateTexCoordTransform[0] ) + cBlendModulateTexCoordTransform[0].w;
		// o.BlendMaskUVW_BlendScale.y = dot( v.vTexCoord0, cBlendModulateTexCoordTransform[1] ) + cBlendModulateTexCoordTransform[1].w;
		// What this actually is :
		// U * scale + V *  0.0f + translation
		// U *  0.0f + V * scale + translation
		// This does an addition and multiplication for nothing.
		// So heres a more optimised version			
		o.BlendMaskUVW_BlendScale.x = v.vTexCoord0.x * cBlendModulateTexCoordTransform[0].x + cBlendModulateTexCoordTransform[0].w;
		o.BlendMaskUVW_BlendScale.y = v.vTexCoord0.y * cBlendModulateTexCoordTransform[1].y + cBlendModulateTexCoordTransform[1].w;
	#elif (BLENDMODULATE_UV == 2)

		float3 f3BlendCoords = f3SeamlessPos;

		// [0].x is scale for U, and [1].y is scale for V
			f3BlendCoords.xy *= float2(cBlendModulateTexCoordTransform[0].x, cBlendModulateTexCoordTransform[1].y);

		// Apply Seamless Scale
			f3BlendCoords.xyz *= SEAMLESS_MODULATE_SCALE;

		// [0].w is translation for U, and [1].w is translation for V
			f3BlendCoords.xy += float2(cBlendModulateTexCoordTransform[0].w, cBlendModulateTexCoordTransform[1].w);

			o.BlendMaskUVW_BlendScale.xyz = f3BlendCoords.xyz;
	#endif

	// BaseTexture Coordinate transform
	#if SEAMLESS_BASE
		// Now as a 3d transform. This should work?!
		float3 f3BaseCoords = f3SeamlessPos;

		#if SEAMLESS_SECONDARY // We want Seamless Coordinates for only the second texture
		f3BaseCoords.xy *= float2(cBase2TexCoordTransform[0].x, cBase2TexCoordTransform[1].y);
		f3BaseCoords.xyz *= SEAMLESS_BASE_SCALE;
		f3BaseCoords.xy += float2(cBase2TexCoordTransform[0].w, cBase2TexCoordTransform[1].w);

			o.Base2Normal2TexCoord.xy = f3BaseCoords.xy;
			o.SeamlessWCoordinates.x = f3BaseCoords.z; // Ugly packing.
			o.BaseDetailTexCoord.x = v.vTexCoord0.x * cBaseTexCoordTransform[0].x + cBaseTexCoordTransform[0].w;
			o.BaseDetailTexCoord.y = v.vTexCoord0.y * cBaseTexCoordTransform[1].y + cBaseTexCoordTransform[1].w;
		#else // Seamless Coordinates for both.
		float3 f3Base2Coords = f3SeamlessPos;
		// [0].x is scale for U, and [1].y is scale for V
			f3BaseCoords.xy	 *=  float2(cBaseTexCoordTransform[0].x,  cBaseTexCoordTransform[1].y);
			f3Base2Coords.xy *= float2(cBase2TexCoordTransform[0].x, cBase2TexCoordTransform[1].y);

		// Apply Seamless Scale
			f3BaseCoords.xyz *= SEAMLESS_BASE_SCALE;
			f3Base2Coords.xyz *= SEAMLESS_BASE_SCALE;

		// [0].w is translation for U, and [1].w is translation for V
			f3BaseCoords.xy		+=	 float2(cBaseTexCoordTransform[0].w,  cBaseTexCoordTransform[1].w);
			f3Base2Coords.xy	+=	float2(cBase2TexCoordTransform[0].w, cBase2TexCoordTransform[1].w);

			o.BaseDetailTexCoord.xy = f3BaseCoords.xy;
			o.SeamlessWCoordinates.x = f3BaseCoords.z; // Ugly packing.
			// Second Textures will use the same seamless-coordinates.
			o.Base2Normal2TexCoord.xy = f3Base2Coords.xy;
		#endif
	#else
		// Previously : 
		// o.BaseDetailTexCoord.x = dot( v.vTexCoord0, cBaseTexCoordTransform[0] ) + cBaseTexCoordTransform[0].w;
		// o.BaseDetailTexCoord.y = dot( v.vTexCoord0, cBaseTexCoordTransform[1] ) + cBaseTexCoordTransform[1].w;
		// What this actually is :
		// U * scale + V *  0.0f + translation
		// U *  0.0f + V * scale + translation
		// This does an addition and multiplication for nothing.
		// So heres a more optimised version
			o.BaseDetailTexCoord.x = v.vTexCoord0.x * cBaseTexCoordTransform[0].x + cBaseTexCoordTransform[0].w;
			o.BaseDetailTexCoord.y = v.vTexCoord0.y * cBaseTexCoordTransform[1].y + cBaseTexCoordTransform[1].w;
			o.Base2Normal2TexCoord.x = v.vTexCoord0.x * cBase2TexCoordTransform[0].x + cBase2TexCoordTransform[0].w;
			o.Base2Normal2TexCoord.y = v.vTexCoord0.y * cBase2TexCoordTransform[1].y + cBase2TexCoordTransform[1].w;
	#endif
	
	// DetailTexture Coordinate Transform
	#if (DETAILTEXTURE_UV == 1)
			// Previously : 
			// o.BaseDetailTexCoord.z = dot( v.vTexCoord0, cDetailTexCoordTransform[0] ) + cDetailTexCoordTransform[0].w;
			// o.BaseDetailTexCoord.w = dot( v.vTexCoord0, cDetailTexCoordTransform[1] ) + cDetailTexCoordTransform[1].w;
			// What this actually is :
			// U * scale + V *  0.0f + translation
			// U *  0.0f + V * scale + translation
			// This does an addition and multiplication for nothing.
			// So heres a more optimised version
			#if SEAMLESS_BASE
				o.BaseDetailTexCoord.zw		= f3BaseCoords.xy;
				o.SeamlessWCoordinates.y	= f3BaseCoords.z;
			#else
				o.BaseDetailTexCoord.z = v.vTexCoord0.x * cDetailTexCoordTransform[0].x + cDetailTexCoordTransform[0].w;
				o.BaseDetailTexCoord.w = v.vTexCoord0.y * cDetailTexCoordTransform[1].y + cDetailTexCoordTransform[0].w;
			#endif
	#elif (DETAILTEXTURE_UV == 2)
		// Now as a 3d transform. This should work?!
		float3 f3DetailCoords = f3SeamlessPos;

		// [0].x is scale for U, and [1].y is scale for V
			f3DetailCoords.xy *= float2(cDetailTexCoordTransform[0].x, cDetailTexCoordTransform[1].y);

		// Apply Seamless Scale
			f3DetailCoords.xyz *= SEAMLESS_DETAIL_SCALE;

		// [0].w is translation for U, and [1].w is translation for V
			f3DetailCoords.xy += float2(cDetailTexCoordTransform[0].w, cDetailTexCoordTransform[1].w);

		o.BaseDetailTexCoord.zw = f3DetailCoords.xy;
		o.SeamlessWCoordinates.y = f3DetailCoords.z; // Ugly packing.
	#endif

	// NormalTexture Coordinate Transform
	#if (NORMALTEXTURE_UV == 1)
		#if SEAMLESS_BASE
			o.NormalEMMTexCoord.xy 		= f3BaseCoords.xy;
			o.SeamlessWCoordinates.z	= f3BaseCoords.z;
			o.Base2Normal2TexCoord.zw	= f3BaseCoords.xy;
		#else
			o.NormalEMMTexCoord.x = v.vTexCoord0.x * cNormalTexCoordTransform[0].x + cNormalTexCoordTransform[0].w;
			o.NormalEMMTexCoord.y = v.vTexCoord0.y * cNormalTexCoordTransform[1].y + cNormalTexCoordTransform[1].w;
			o.Base2Normal2TexCoord.z = v.vTexCoord0.x * cNormal2TexCoordTransform[0].x + cNormal2TexCoordTransform[0].w;
			o.Base2Normal2TexCoord.w = v.vTexCoord0.y * cNormal2TexCoordTransform[1].y + cNormal2TexCoordTransform[1].w;
		#endif
	#elif  NORMALTEXTURE_UV == 2
		// Now as a 3d transform. This should work?!
		float3 f3BumpCoords = f3SeamlessPos;

		#if SEAMLESS_SECONDARY // We want Seamless Coordinates for only the second texture
		f3BumpCoords.xy *= float2(cNormal2TexCoordTransform[0].x, cNormal2TexCoordTransform[1].y);
		f3BumpCoords.xyz *= SEAMLESS_BUMP_SCALE;
		f3BumpCoords.xy += float2(cNormal2TexCoordTransform[0].w, cNormal2TexCoordTransform[1].w);

			o.Base2Normal2TexCoord.zw = f3BumpCoords.xy;
			o.SeamlessWCoordinates.x = f3BumpCoords.z; // Ugly packing.
			o.NormalEMMTexCoord.x = v.vTexCoord0.x * cNormalTexCoordTransform[0].x + cNormalTexCoordTransform[0].w;
			o.NormalEMMTexCoord.y = v.vTexCoord0.y * cNormalTexCoordTransform[1].y + cNormalTexCoordTransform[1].w;
		#else // Seamless Coordinates for both.
		float3 f3Bump2Coords = f3SeamlessPos;
		// [0].x is scale for U, and [1].y is scale for V
			f3BumpCoords.xy *= float2(cNormalTexCoordTransform[0].x, cNormalTexCoordTransform[1].y);
			f3Bump2Coords.xy *= float2(cNormal2TexCoordTransform[0].x, cNormal2TexCoordTransform[1].y);

		// Apply Seamless Scale
			f3BumpCoords.xyz *= SEAMLESS_BUMP_SCALE;
			f3Bump2Coords.xyz *= SEAMLESS_BUMP_SCALE;

		// [0].w is translation for U, and [1].w is translation for V
			f3BumpCoords.xy += float2(cNormalTexCoordTransform[0].w, cNormalTexCoordTransform[1].w);
			f3Bump2Coords.xy += float2(cNormal2TexCoordTransform[0].w, cNormal2TexCoordTransform[1].w);

			o.NormalEMMTexCoord.xy = f3BumpCoords.xy;
			o.SeamlessWCoordinates.x = f3BumpCoords.z; // Ugly packing.
			// Second Textures will use the same seamless-coordinates.
			o.Base2Normal2TexCoord.zw = f3Bump2Coords.xy;
		#endif
	#endif

	// EnvMapMask Coordinate Transform
	#if (ENVMAPMASK_UV == 1)
		#if SEAMLESS_BASE
			o.NormalEMMTexCoord.zw 		= f3BaseCoords.xy;
			o.SeamlessWCoordinates.w	= f3BaseCoords.z;
		#else
			o.NormalEMMTexCoord.z = v.vTexCoord0.x * cEnvMapMaskTexCoordTransform[0].x + cEnvMapMaskTexCoordTransform[0].w;
			o.NormalEMMTexCoord.w = v.vTexCoord0.y * cEnvMapMaskTexCoordTransform[1].y + cEnvMapMaskTexCoordTransform[1].w;
		#endif
	#elif (ENVMAPMASK_UV == 2)
		// Now as a 3d transform. This should work?!
		float3 f3EMMCoords = f3SeamlessPos;

		// [0].x is scale for U, and [1].y is scale for V
			f3EMMCoords.xy *= float2(cEnvMapMaskTexCoordTransform[0].x, cEnvMapMaskTexCoordTransform[1].y);

		// Apply Seamless Scale
			f3EMMCoords.xyz *= SEAMLESS_EMM_SCALE;

		// [0].w is translation for U, and [1].w is translation for V
			f3EMMCoords.xy += float2(cEnvMapMaskTexCoordTransform[0].w, cEnvMapMaskTexCoordTransform[1].w);

			o.NormalEMMTexCoord.zw = f3EMMCoords.xy;
			o.SeamlessWCoordinates.w = f3EMMCoords.z; // Ugly packing.
	#endif

	// This should be the displacement blend alpha...
		o.BlendMaskUVW_BlendScale.w = v.vColor.w;

    return o;
}