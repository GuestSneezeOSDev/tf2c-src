// shadertype=hlsl
//========= ShiroDkxtro2's --ACROHS Ultimate Shaders Project-- ============//
//
//	Initial D.	:	14.02.2023 DMY
//	Last Change :	26.05.2023 DMY
//
//	Purpose of this File :	$Phong Materials
//
//===========================================================================//

//===========================================================================//
//	Declare Static Combos
//===========================================================================//
// STATIC:	"ENVMAPMODE"				"0..2" // CUBEMAPS 2 0
// STATIC:	"ENVMAPANISOTROPY"			"0..1"
// STATIC:	"SELFILLUMMODE"				"0..3" // SELFILLUMTEXTURING 3 2
// STATIC:	"BLENDTINTBYBASEALPHA"		"0..1" // BASETINTINGVIAALPHA 1 0
// STATIC:	"DETAILTEXTURE"				"0..1" // DETAILTEXTURING 1 0
// STATIC:	"PHONGEXPONENTTEXTURE"		"0..1"
// STATIC:	"DESATURATEBYBASEALPHA"		"0..1"

//===========================================================================//
//	Declare Dynamic Combos
//===========================================================================//
// DYNAMIC:	"PIXELFOGTYPE"				"0..1"
// DYNAMIC:	"WRITEWATERFOGTODESTALPHA"	"0..1"
// DYNAMIC: "NUM_LIGHTS"				"0..4"
// DYNAMIC: "AMBIENT_LIGHT"				"0..1"

//===========================================================================//
//	Skipping combos that are unneeded
//	GIGA IMPORTANT :	The order of the STATIC:'s and the order of the skips
//						will DRASTICALLY affect compiletime!
//===========================================================================//
// SKIP: ( $ENVMAPMODE == 0				&&	$ENVMAPANISOTROPY == 1 )
// SKIP: ( $ENVMAPMODE != 2				&&	$SELFILLUMMODE == 2 )
// SKIP: ( $SELFILLUMMODE == 1			&&	$BLENDTINTBYBASEALPHA == 1 )
// SKIP: ( $BLENDTINTBYBASEALPHA == 1	&&	$DESATURATEBYBASEALPHA == 1 )
// SKIP: ( $PIXELFOGTYPE == 0			&&	$WRITEWATERFOGTODESTALPHA != 0 )

// This is NOT a Shader used on BRUSHES
// #define BRUSH

// Can NOT use Seamless Texturemapping
// #define SEAMLESS

// This is a Shader used on MODELS
#define MODEL

// This Shaders USES Normalmaps
#define NORMALTEXTURE

// This Shader USES Phong
#define PHONG

// This is used to disable features automatically.
#include "ACROHS_Defines.h"

//===========================================================================//
//	Include Files ( and with them, function declarations )
//===========================================================================//

//	This has to be included first. It includes pragmas, #define's, and the register map.
#include "lux_common_ps_fxc.h"
// SelfIllum Data
#include "lux_common_selfillum.h"
// EnvMapping Data
#include "lux_common_envmap.h"
// Common Lighting functions
#include "lux_common_lighting.h"
// Phong lighting functions
#include "lux_common_phong.h"

//===========================================================================//
//	Constant Register Declaration and SKIPS
//===========================================================================//
//	This File includes 0-31 Commonly used registers for Pixelshaders
//	Everything you could find in a stock SDK Pixelshader!
#include "lux_common_ps_fxc.h"

//===========================================================================//
//	Everything Vertex Shader is outputting, enters here
//===========================================================================//
struct PS_INPUT
{
    float4	BaseDetailTexCoord		:	TEXCOORD0;
	float4	NormalENMTexCoord		:	TEXCOORD1;
	float3	WorldNormal				:	TEXCOORD2;
	float3	WorldPos				:	TEXCOORD3;
	float3	ProjPos					:	TEXCOORD4;
	float4	LightmapTexCoord1And2	:	TEXCOORD5;
	float4	LightAtten				:	TEXCOORD6;
//	float4	StaticPropLighting		:	TEXCOORD7;
	float4	VertexColor				:	COLOR0;
};
 
//===========================================================================//
//	Rendering Start - Entry point
//===========================================================================//
float4 main(PS_INPUT i) : COLOR
{
	//	Getting our PS_INPUT... TODO/FIXME: Does this require more memory?
	//===========================================================================//

		float2 f2BaseTextureUV = i.BaseDetailTexCoord.xy;

	#if DETAILTEXTURE
		float2 f2DetailTextureUV = i.BaseDetailTexCoord.zw;
	#endif

	// Always need it.
		float2 f2NormalUV = i.NormalENMTexCoord.xy;
		float2 f2EnvMapMaskUV = i.NormalENMTexCoord.zw;

	// .xyz's in case we need to pack something later
		float3 f3FaceNormal			= i.WorldNormal.xyz;
		float3 f3WorldPosition		= i.WorldPos.xyz;
		float3 f3ProjectPosition	= i.ProjPos.xyz;
		float4 f4LightmapUV1		= i.LightmapTexCoord1And2; // TODO: figure out what the heck is AA_CLAMP supposed to do

	// ShiroDkxtro2 :	We do this like the PBR Shader.
	//					Tottery says this causes issues on smoothed models.
	//					However, it means we can receive more things from the Vertex Shader
	//					And I have not noticed any of such Issues.
		float3	f3SurfaceNormal = normalize(f3FaceNormal);
		float3	f3SurfaceTangent;
		float3	f3SurfaceBase; 
		float	f1FlipSign;
		float3x3 f3x3NormalBasis = Compute_Tangent_Frame(f3SurfaceNormal, f3WorldPosition, f2NormalUV , f3SurfaceTangent, f3SurfaceBase, f1FlipSign);

	//===========================================================================//
	//	Getting the current Pixels Color from the Samplers
	//===========================================================================//

		float4	f4BaseTexture	= tex2D(	Sampler_BaseTexture,		f2BaseTextureUV);	// s0
		float4	f4NormalTexture	= tex2D(	Sampler_NormalTexture,		f2NormalUV);		// s2
	#if DETAILTEXTURE
		float4	f4DetailTexture	= tex2D(	Sampler_DetailTexture,		f2DetailTextureUV);	// s4
	#endif

	// This is the TextureNormal, perturbed one anyways
		float3	f3NormalTexture = f4NormalTexture.xyz * 2.0f - 1.0f; // normalize(f4NormalTexture.xyz - float3(0.5, 0.5, 0.5)) * 2.0f;
				f3NormalTexture *= 2.0f;
	// This is a modified WorldNormal
		f3FaceNormal = normalize(mul(f3NormalTexture, f3x3NormalBasis));

	//===========================================================================//
	//	Adding tints when possible
	//===========================================================================//

	#if BLENDTINTBYBASEALPHA
	// Same as Stock VertexLitGeneric...
	float3	f4TintedBaseTexture	= f4BaseTexture.xyz * f3BaseTextureTint;
			f4TintedBaseTexture	= lerp(f4TintedBaseTexture, f3BaseTextureTint, f1BlendTintFactor);
			f4BaseTexture.xyz	= lerp(f4BaseTexture.xyz, f4TintedBaseTexture, f4BaseTexture.w);
	#else
			f4BaseTexture.xyz *= f3BaseTextureTint;
		#if DESATURATEBYBASEALPHA
			float3	f3DesaturatedBaseAlpha = dot(f4BaseTexture.xyz, f3LumCoefficients);
					f4BaseTexture.xyz = lerp(f4BaseTexture.xyz, f3DesaturatedBaseAlpha, f1DesaturationFactor);
		#endif
	#endif


	#if DETAILTEXTURE
		int iDetailBlendMode = trunc(f1DetailBlendMode);
		f4DetailTexture.xyz *= f3DetailTextureTint;
		f4BaseTexture = TextureCombine( f4BaseTexture, f4DetailTexture, iDetailBlendMode, f1DetailBlendFactor );
	#endif

	    float3	f3ViewVector = normalize(g_EyePos.xyz - f3WorldPosition); // Lo
		float	f1NdotV		 = saturate(dot(f3FaceNormal, f3ViewVector)); // cosLo
		float3	f4Result = {0.0f, 0.0f, 0.0f};
	// f3NormalTexture.y *= f1FlipSign; // Fixup TextureNormal for ambient lighting
	// We always need this due to bHasRimMask being part of the bHasPhongExponent statement
		float	f1RimLightMask				= 1.0f;

	// This reproduces the same Fresnel as the stock Shaders.
		float	f1Fresnel		 = 1.0f - f1NdotV;
				f1Fresnel		*= f1Fresnel; // Square
		float	f1FresnelPhong	 = f1Fresnel;

	// $PhongExponentTextureMask override below. Doing Normal/Base Alpha instead...
		float	f1PhongMask = 1.0f;

	// $PhongExponent. Will be our $PhongExponentFactor when doing $PhongExponentTexture
		float	f1PhongExponent			= f1PhongExponentParam;

	// .x=PhongExponent/149, .y=AlbedoTintMask, z.=PhongMask ? $PhongExponentTextureMask, .w=RimMask so default 1.0f
		float4	f4PhongExponentTexture	= {0.0f, 1.0f, 1.0f, 1.0f};

	// ShiroDkxtro2 Note :	See ACROHS_Defines.h and lux_common_ps_fxc.h for more information about luminance weights
	//						Lum Coefficients are used to desaturate or to get the average luminance of rgb values
		float3	f3SpecularTint = float3(1.0f,1.0f,1.0f);

		if(bHasPhongAlbedoTint)
		{
			f3SpecularTint = f4BaseTexture.xyz * f1AlbedoTintBoost;
		}


	//---------------------------------------------------------------------------//
	// Add Phongexponenttexture data if we have one.
	// ShiroDkxtr2 :	My hope is that after this I will never be allowed to write Shadercode again.
	//					What have those lunatic Valve Shaders forced upon me...
	//---------------------------------------------------------------------------//
	#if PHONGEXPONENTTEXTURE
		// Get the Pixel from the Texture into our float4.
			f4PhongExponentTexture = tex2D(Sampler_PhongExpTexture, f2BaseTextureUV);
	
		// Note:	f1PhongExponent is $PhongExponentFactor when using a PhongExponentTexture.
		//			Without $PhongExponentTexture it will be $PhongExponent.
		//			So this is basically = Texture.x * 149.0f + 1.0f
			f1PhongExponent *= f4PhongExponentTexture.x;
			f1PhongExponent += 1.0f;
	
		// This allows for the use of both $PhongAlbedoTint and $BaseMapLuminancePhongMask (f3SpecularTint) at the same time.
			if(bHasPhongAlbedoTint)
			{
				f3SpecularTint *= f4PhongExponentTexture.y;
			}

		// if $RimMask use the Alpha-Channel of the $PhongExponentTexture as the Mask.
			if(bHasRimLightMask)
			{
					f1RimLightMask = f4PhongExponentTexture.w;
			}

		// If $PhongExponentTextureMask is set, use the blue channel as PhongMask so that Base and Normal can be used for other stuff.
			if(bHasPhongExponentTextureMask)
			{
				
					f1PhongMask =f4PhongExponentTexture.z;
			}
			else
	#endif // End - PHONGEXPONENTTEXTURE
			{ // How 2 extra performance
				if(bHasBaseAlphaPhongMask)
				{
					f1PhongMask = f4BaseTexture.w;
				}
				else
				{
					f1PhongMask = f4NormalTexture.w;
				}
			}

		// Invert the Mask if wanted.
			if(bHasInvertedPhongMask)
			{
				f1PhongMask = 1.0f - f1PhongMask;
			}
		
		// $PhongAlbedoTint was already applied. We can still apply luminance though.	
			if(bHasBasemapLuminancePhongMask)
			{
				f3SpecularTint *= dot( f4BaseTexture.xyz, f3LumCoefficients );
			}

		f3SpecularTint *= f1PhongMask;

	// f3Lighting is later used for $envmaplightscale
		float3 f3Lighting = 0.0f;
		f4Result = LUX_DoSpecular(f3FaceNormal, f3WorldPosition, i.LightAtten, f1NdotV, f3ViewVector, f1PhongExponent, f1FresnelPhong, f1RimLightMask, f3SpecularTint, f4BaseTexture.xyz, f3Lighting);

	// Are we supposed to render a Cubemap?
#if (ENVMAPMODE > 0)
		#if (ENVMAPMODE == 2) // $EnvMapMask
			float4	f4EnvMapMask = tex2D( Sampler_EnvMapMask, f2EnvMapMaskUV );
			float3 f3CubemapMask = f4EnvMapMask.xyz;
		#else
			float3 f3CubemapMask = lerp(float3(1.0f, 1.0f, 1.0f), f4BaseTexture.www, f1LerpBaseAlpha); // No Masking && $PhongEnvMapNoMask
			f3CubemapMask = lerp(f3CubemapMask, f4NormalTexture.www, f1LerpNormalAlpha);
		#endif

	#if ENVMAPANISOTROPY
		// EnvMap Anisotropy implementation adapted from Far Cry 4 / Filament, what did you think? CSGO?
		// Thank you Stephen McAuley, https://archive.org/details/GDC2015McAuley
		// Also thanks to Filament, https://google.github.io/filament/Filament.md.html

		float3 f3AnisotropicTangent = cross(f3ViewVector, f3FaceNormal);
		float3 f3AnisotropicNormal	= cross(f3FaceNormal, f3AnisotropicTangent);
		float3 BentNormal			= normalize(lerp(f3SurfaceNormal, f3AnisotropicNormal, f4NormalTexture.a * f1EnvMapAnisotropyScale));

		// ShiroDkxtro2 : Unlike Filament, do not invert f3ViewVector, if you do, the entire cubemap will be reversed!
		// I assume this comes from difference in their TangentSpace Orientation or the Coordinate System. ( XZY instead of XYZ? )
		// Anyways, This will result in a PROPERLY aligned Reflection Vector!
		float3 f3ReflectionVector	= reflect(f3ViewVector, BentNormal);
	#else
		// Use existing HLSL function for Reflection Vectors!
		float3 f3ReflectionVector = reflect(f3ViewVector, f3FaceNormal);
	#endif

		// Lookup the Texture using f3ReflectionVector as the VectorUV for the Cubemap. ( which pixel it points at)
        float4 f4SpecularUV = float4(f3ReflectionVector, ENVMAPLOD);
		float3 f3SpecularLookUp = ENV_MAP_SCALE * texCUBE(Sampler_EnvironmentMap, f4SpecularUV).xyz;

		f3SpecularLookUp *= lerp(f3CubemapMask, 1.0f - f3CubemapMask, f1EnvMapMaskFlip);

		f3SpecularLookUp *= f3EnvMapTint;
		float3 f3LookupHighSaturated = f3SpecularLookUp * f3SpecularLookUp;
		f3SpecularLookUp = lerp( f3SpecularLookUp, f3LookupHighSaturated, f1EnvMapContrast );

		// ShiroDkxtro2 Note :	See ACROHS_Defines.h and lux_common_ps_fxc.h for more information about luminance weights
		//						Lum Coefficients are used to desaturate or to get the average luminance of rgb values
		float3 f3DesaturatedCubemap = dot( f3SpecularLookUp, f3LumCoefficients );
		f3SpecularLookUp = lerp( f3DesaturatedCubemap, f3SpecularLookUp, f3EnvMapSaturation );

	float f1EnvMapFresnel = 1.0f;
	if(bHasEnvMapFresnel)
	{
		f1EnvMapFresnel = f1EnvMapFresnelScale * pow( f1Fresnel, f1EnvMapFresnelExponent) + f1EnvMapFresnelBias;
	}

	f3SpecularLookUp *= f1EnvMapFresnel;

	f4Result += lerp(f3SpecularLookUp, f3SpecularLookUp * saturate(f3Lighting), f1EnvMapLightScale);

#endif // End Cubemap

    float f1FogFactor = CalcPixelFogFactor(PIXELFOGTYPE, g_FogParams, g_EyePos.xyz, f3WorldPosition, f3ProjectPosition.z);

#if (SELFILLUMMODE != 0)

	float	f1FresnelSelfIllum = 1.0f;
	if(bHasSelfIllumFresnel)
	{
		f1FresnelSelfIllum = f1SelfIllumFresnelScale * pow( f1Fresnel, f1SelfIllumFresnelExponent) + f1SelfIllumFresnelBias;
	}

#if (SELFILLUMMODE == 1) // Basealpha Selfillum and mask texture
	float4	f4SelfIllum		= tex2D( Sampler_SelfIllum, f2BaseTextureUV);	
			f4SelfIllum.xyz = lerp( f4BaseTexture.aaa, f4SelfIllum.xyz, f1SelfIllumMaskFactor) * f1FresnelSelfIllum;
			f4Result.xyz = lerp(f4Result.xyz, f4BaseTexture.xyz * f3SelfIllumTint, f4SelfIllum.xyz);
#elif (SELFILLUMMODE == 2)
			f4Result.xyz = lerp(f4Result.xyz, f4BaseTexture.xyz * f3SelfIllumTint * f1FresnelSelfIllum ,f4EnvMapMask.w);
#else // (SELFILLUMMODE == 3)
	float4	f4SelfIllum   = tex2D( Sampler_SelfIllum, f2BaseTextureUV);
			f4Result.xyz += f4SelfIllum.xyz * f3SelfIllumTint * f1FresnelSelfIllum;
#endif // Selfillummode 1-3
#endif // Selfillummode

#if WRITEWATERFOGTODESTALPHA && (PIXELFOGTYPE == PIXEL_FOG_TYPE_HEIGHT)
    float f1Alpha = f1FogFactor;
#else
    float f1Alpha = f4BaseTexture.a;
#endif // WRITEWATERFOGTODESTALPHA && (PIXELFOGTYPE == PIXEL_FOG_TYPE_HEIGHT)

	// Cannot do bDepthToDestAlpha && (WRITEWATERFOGTODESTALPHA == 0)
	// Boolean Registers may only be used in If-Statements!!!
    bool bWriteDepthToAlpha = (WRITEWATERFOGTODESTALPHA == 0);
	if(!bDepthToDestAlpha)
	{
		bWriteDepthToAlpha = false;
	}

#if DETAILTEXTURE
	f4Result = TextureCombinePostLighting( f4Result, f4DetailTexture, iDetailBlendMode, f1DetailBlendFactor ); // $detail, $detailblendmode $detailblendfactor
#else

	// ShiroDkxtro2 : This doesn't happen on DetailTexture Combo because I fear we otherwise might run into Instruction limits.
	// $VertexColor
	if(bVertexColor)
	{
		f4Result.xyz *= i.VertexColor.xyz;
	}

	// $VertexAlpha
	if(bVertexAlpha)
	{
		f1Alpha *= i.VertexColor.w;
	}
#endif

// Result must be f4 because of DetailTextureCombine
    return FinalOutput(float4(f4Result.xyz, f1Alpha), f1FogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, bWriteDepthToAlpha, f3ProjectPosition.z);
}