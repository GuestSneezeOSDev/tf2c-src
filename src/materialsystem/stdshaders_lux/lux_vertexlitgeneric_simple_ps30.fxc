// shadertype=hlsl
//========= ShiroDkxtro2's --ACROHS Ultimate Shaders Project-- ============//
//
//	Initial D.	:	07.02.2023 DMY
//	Last Change :	20.05.2023 DMY
//
//	Purpose of this File :	VertexLitGeneric Materials no $Bumpmap or $Phong
//
//===========================================================================//

//===========================================================================//
//	Declare Static Combos
//===========================================================================//
// STATIC:	"ENVMAPMODE"				"0..2" // CUBEMAPS 2 0
// STATIC:	"ENVMAPFRESNEL"				"0..1" // CUBEMAPS_FRESNEL 1 0
// STATIC:	"SELFILLUMMODE"				"0..3" // SELFILLUMTEXTURING 3 2
// STATIC:	"DETAILTEXTURE"				"0..1" // DETAILTEXTURING 1 0
// STATIC:	"BLENDTINTBYBASEALPHA"		"0..1" // BASETINTINGVIAALPHA 1 0
// STATIC:	"DESATURATEBYBASEALPHA"		"0..1"

//===========================================================================//
//	Declare Dynamic Combos
//===========================================================================//
// DYNAMIC:	"PIXELFOGTYPE"				"0..1"
// DYNAMIC:	"WRITEWATERFOGTODESTALPHA"	"0..1"
// DYNAMIC: "LIGHTMAPPED_MODEL"			"0..0"

//===========================================================================//
//	Skipping combos that are unneeded
//	GIGA IMPORTANT :	The order of the STATIC:'s and the order of the skips
//						will DRASTICALLY affect compiletime!
//===========================================================================//
// SKIP: ( $ENVMAPMODE == 0				&&	$ENVMAPFRESNEL == 1 )
// SKIP: ( $ENVMAPMODE != 2 			&&	$SELFILLUMMODE == 2 )
// SKIP: ( $SELFILLUMMODE == 1			&&	$BLENDTINTBYBASEALPHA != 0 )
// SKIP: ( $BLENDTINTBYBASEALPHA != 0	&&	$DESATURATEBYBASEALPHA != 0 )
// SKIP: ( $PIXELFOGTYPE == 0			&&	$WRITEWATERFOGTODESTALPHA != 0 )

//===========================================================================//
//	Include Files ( and with them, function declarations )
//===========================================================================//

// This is used to disable features automatically.
#include "ACROHS_Defines.h"

// This is NOT a Shader used on BRUSHES
// #define BRUSH

// Can use Seamless Texturemapping
#define SEAMLESS

// This is a Shader used on MODELS
#define MODEL

// This Shaders does NOT use Normalmaps
//#define NORMALTEXTURE

//	This has to be included first. It includes pragmas, #define's, and the register map.
#include "lux_common_ps_fxc.h"
// SelfIllum Data
#include "lux_common_selfillum.h"
// EnvMapping Data
#include "lux_common_envmap.h"
// common lighting functions
#include "lux_common_lighting.h"
// common flashlight function.
#include "lux_common_flashlight.h"

// Only for model lightmaps.
sampler Sampler_LightMap		: register(s11);

//===========================================================================//
//	Everything Vertex Shader is outputting, enters here
//===========================================================================//
struct PS_INPUT
{
    float4	BaseDetailTexCoord		:	TEXCOORD0;
#if (ENVMAPMODE == 2)
	float4	NormalENMTexCoord		:	TEXCOORD1;
#endif
	float3	WorldNormal				:	TEXCOORD2;
	float3	WorldPos				:	TEXCOORD3;
	float3	ProjPos					:	TEXCOORD4;
	float4	LightmapTexCoord1And2	:	TEXCOORD5;
	float4	StaticPropLighting		:	TEXCOORD6;
	float4	VertexColor				:	COLOR0;

};
 
//===========================================================================//
//	Rendering Start - Entry point
//===========================================================================//
float4 main(PS_INPUT i) : COLOR
{
	//	Getting our PS_INPUT... TODO/FIXME: Does this require more memory?
	//===========================================================================//
	// If you see this, then Integer Constant Registers don't work, or I haven't found a way to use them.
	int iDetailBlendMode = trunc(f1DetailBlendMode);
	// int g_Debug = trunc(DEBUG.x);

	float2 f2BaseTextureUV = i.BaseDetailTexCoord.xy;

	#if DETAILTEXTURE
	float2 f2DetailTextureUV = i.BaseDetailTexCoord.zw;
	#endif

	#if (ENVMAPMODE == 2)
	float2 f2EnvMapMaskUV = i.NormalENMTexCoord.zw;
	#endif

	// .xyz's in case we need to pack something later
    float3 f3FaceNormal			= i.WorldNormal.xyz;
	float3 f3WorldPosition		= i.WorldPos.xyz;
	float3 f3ProjectPosition	= i.ProjPos.xyz;
	float2 f2LightmapUV			= i.LightmapTexCoord1And2.xy; // TODO: figure out what the heck is AA_CLAMP supposed to do

	//===========================================================================//
	//	Getting the current Pixels Color from the Samplers
	//===========================================================================//


	float4	f4BaseTexture	= tex2D(	Sampler_BaseTexture,		f2BaseTextureUV);

	#if LIGHTMAPPED_MODEL
		float3	f3LightMap = tex2D(Sampler_LightMap, f2LightmapUV).xyz * 2.0f;
	#endif

	#if (SELFILLUMMODE == 1 || SELFILLUMMODE == 3)
		float4	f4SelfIllum		= tex2D(	Sampler_SelfIllum,			f2BaseTextureUV);
	#endif

	//===========================================================================//
	//	Adding tints when possible
	//===========================================================================//

	#if BLENDTINTBYBASEALPHA
	// Same as VertexLitGeneric...
	float3	f4TintedBaseTexture	= f4BaseTexture.xyz * f3BaseTextureTint;
			f4TintedBaseTexture	= lerp(f4TintedBaseTexture, f3BaseTextureTint, f1BlendTintFactor);
			f4BaseTexture.xyz	= lerp(f4BaseTexture.xyz, f4TintedBaseTexture, f4BaseTexture.w);
	#else
			f4BaseTexture.xyz *= f3BaseTextureTint;
		#if DESATURATEBYBASEALPHA
			float3	f3DesaturatedBaseAlpha = dot(f4BaseTexture.xyz, f3LumCoefficients);
					f4BaseTexture.xyz = lerp(f4BaseTexture.xyz, f3DesaturatedBaseAlpha, f1DesaturationFactor);
		#endif
	#endif

	#if (SELFILLUMMODE == 3)
	f4SelfIllum.xyz *= f3SelfIllumTint;
	#endif

	#if DETAILTEXTURE
		float4	f4DetailTexture	= tex2D(	Sampler_DetailTexture,		f2DetailTextureUV);
		f4DetailTexture.xyz *= f3DetailTextureTint;
		f4BaseTexture = TextureCombine( f4BaseTexture, f4DetailTexture, iDetailBlendMode, f1DetailBlendFactor );
	#endif
	
	    float3 f4Result = {0.0f, 0.0f, 0.0f};
		
	    float3	f3ViewVector = normalize(g_EyePos.xyz - f3WorldPosition); // Lo
		float	f1NdotV		 = max(0, dot(f3FaceNormal, f3ViewVector)); // cosLo
	
	#if LIGHTMAPPED_MODEL
		f4Result = f4BaseTexture.xyz * f3LightMap * i.StaticPropLighting.xyz; // Lightmap + local lights
	#else
		f4Result = f4BaseTexture.xyz * i.StaticPropLighting.xyz; // StaticPropLighting
	#endif
	
		// Are we supposed to render a Cubemap?
	#if (ENVMAPMODE > 0)
		#if (ENVMAPMODE == 2) // $EnvMapMask
			float4	f4EnvMapMask = tex2D( Sampler_EnvMapMask, f2EnvMapMaskUV );
			float3 f3CubemapMask = f4EnvMapMask.xyz;
		#else
			float3 f3CubemapMask = lerp(float3(1.0f, 1.0f, 1.0f), f4BaseTexture.www, f1LerpBaseAlpha);
		#endif

		// A better reflection vector...
		float3 f3ReflectionVector = reflect(f3ViewVector, f3FaceNormal);

		// Lookup the Texture using f3ReflectionVector as the VectorUV for the Cubemap. ( which pixel it points at)
        float4 f4SpecularUV = float4(f3ReflectionVector, ENVMAPLOD);
		float3 f3SpecularLookUp = ENV_MAP_SCALE * texCUBE(Sampler_EnvironmentMap, f4SpecularUV).xyz;

		f3SpecularLookUp *= lerp(f3CubemapMask, 1.0f - f3CubemapMask, f1EnvMapMaskFlip);

		f3SpecularLookUp *= f3EnvMapTint;
		float3 f3LookupHighSaturated = f3SpecularLookUp * f3SpecularLookUp;
		f3SpecularLookUp = lerp( f3SpecularLookUp, f3LookupHighSaturated, f1EnvMapContrast );

		// If you are curious this has to do with perception.
		float3 f3DesaturatedCubemap = dot( f3SpecularLookUp, float3( 0.299f, 0.587f, 0.114f ) );
		f3SpecularLookUp = lerp( f3DesaturatedCubemap, f3SpecularLookUp, f3EnvMapSaturation );

	#if ENVMAPFRESNEL

	// TODO: Consider doing Unreal Engine Fresnel based on Envmapmask
	float f1Fresnel = 1.0f - f1NdotV;
	f1Fresnel = f1EnvMapFresnelScale * pow( f1Fresnel, f1EnvMapFresnelExponent) + f1EnvMapFresnelBias;
	f3SpecularLookUp *= f1Fresnel;

	#endif

	#if LIGHTMAPPED_MODEL
		f4Result += lerp(f3SpecularLookUp, f3SpecularLookUp * saturate(f3LightMap), f1EnvMapLightScale);
	#else
		f4Result += lerp(f3SpecularLookUp, f3SpecularLookUp * saturate(i.StaticPropLighting.xyz), f1EnvMapLightScale);
	#endif


#endif // End Cubemap

    float f1FogFactor = CalcPixelFogFactor(PIXELFOGTYPE, g_FogParams, g_EyePos.xyz, f3WorldPosition, f3ProjectPosition.z);

#if WRITEWATERFOGTODESTALPHA && (PIXELFOGTYPE == PIXEL_FOG_TYPE_HEIGHT)
    float f1Alpha = f1FogFactor;
#else
    float f1Alpha = f4BaseTexture.a;
#endif // WRITEWATERFOGTODESTALPHA && (PIXELFOGTYPE == PIXEL_FOG_TYPE_HEIGHT)

	// Cannot do bDepthToDestAlpha && (WRITEWATERFOGTODESTALPHA == 0)
	// Boolean Registers may only be used in If-Statements!!!
    bool bWriteDepthToAlpha = (WRITEWATERFOGTODESTALPHA == 0);
	if(!bDepthToDestAlpha)
	{
		bWriteDepthToAlpha = false;
	}

#if DETAILTEXTURE
	f4Result = TextureCombinePostLighting( f4Result, f4DetailTexture, iDetailBlendMode, f1DetailBlendFactor ); // $detail, $detailblendmode $detailblendfactor
#endif

#if (SELFILLUMMODE == 1) // Basealpha Selfillum and mask texture
			f4SelfIllum.xyz = lerp( f4BaseTexture.aaa, f4SelfIllum.xyz, f1SelfIllumMaskFactor);
			f4Result.xyz = lerp(f4Result.xyz, f4BaseTexture.xyz * f3SelfIllumTint, f4SelfIllum.xyz);
#elif ((SELFILLUMMODE == 2) && (ENVMAPMODE == 2))
			f4Result.xyz = lerp(f4Result.xyz, f4BaseTexture.xyz * f3SelfIllumTint ,f4EnvMapMask.w);
#elif (SELFILLUMMODE == 3)
			f4Result.xyz += f4SelfIllum.xyz;
#endif // Selfillummode

	// $VertexColor
	if(bVertexColor)
	{
		f4Result.xyz *= i.VertexColor.xyz;
	}

	// $VertexAlpha
	if(bVertexAlpha)
	{
		f1Alpha *= i.VertexColor.w;
	}

// Result must be f4 because of DetailTextureCombine
    return FinalOutput(float4(f4Result.xyz, f1Alpha), f1FogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, bWriteDepthToAlpha, f3ProjectPosition.z);
}